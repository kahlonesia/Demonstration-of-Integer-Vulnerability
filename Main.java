package cashRegister;

import java.awt.BorderLayout;
import java.awt.GridLayout;
import java.awt.event.*;
import java.util.ArrayList;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;

public class Main<MemberV0> extends JFrame {
	private static final long serialVersionUID = 1L;
	
	ArrayList<MemberV0> members = new ArrayList<MemberV0>();
	int store_balance = 0;
	int customer_balance = 0;
	int total_purchase = 0;
	
	public Main() {
		setTitle("Secure Coding");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setAlwaysOnTop(true);
		setBounds(200, 100, 800, 200);
		
		String[] colNames = new String[] {"Customer Name", "Fruit", "Quantity", "Total Purchase ($)", "Customer Balance ($)", "Store Balance ($)"};
		DefaultTableModel model = new DefaultTableModel(colNames, 0);
		JTable table = new JTable(model);
		JScrollPane scrollPane = new JScrollPane(table);
		add(scrollPane, BorderLayout.CENTER);
		
		JPanel bottomPanel = new JPanel();
		bottomPanel.setLayout(new GridLayout(2, 1));
		JPanel panel = new JPanel();
		
		JTextField tfName = new JTextField(6);
		JTextField tfQua = new JTextField(15);
		JTextField tfCusBal = new JTextField(4);
		
		JRadioButton rb1 = new JRadioButton("Apple: 1");
		JRadioButton rb2 = new JRadioButton("Mango: 2");
		JRadioButton rb3 = new JRadioButton("Banana: 3");
		JRadioButton rb4 = new JRadioButton("Orange: 4");
		JRadioButton rb5 = new JRadioButton();
		ButtonGroup rg = new ButtonGroup();
		rg.add(rb1);
		rg.add(rb2);
		rg.add(rb3);
		rg.add(rb4);
		rg.add(rb5);
		rb1.setSelected(true);
		
		panel.add(new JLabel("NAME"));
		panel.add(tfName);
		panel.add(new JLabel("QUANTITY"));
		panel.add(tfQua);
		panel.add(new JLabel("BALANCE ($)"));
		panel.add(tfCusBal);
		panel.add(rb1);
		panel.add(rb2);
		panel.add(rb3);
		panel.add(rb4);
		bottomPanel.add(panel);
		
		JPanel panel2 = new JPanel();
		JButton btnAdd = new JButton("Add");
		JButton btnDel = new JButton("Delete");
		panel2.add(btnAdd);
		panel2.add(btnDel);
		bottomPanel.add(panel2);
		
		btnAdd.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				String[] rows = new String[7];
				JOptionPane alert = new JOptionPane();
				rows[0] = tfName.getText();
				rows[2] = tfQua.getText();
				rows[6] = tfCusBal.getText();
				
				if (members.size() != 0) {
					for (int i = members.size() - 1; i > -1; i--) {
						if ((members.get(i).name).equals(rows[0])) {
							customer_balance = members.get(i).customer;
							System.out.println("Same Customer: " + customer_balance);
							break;
						}
						else customer_balance = Integer.parseInt(rows[6]);
					}
				}
				else customer_balance = Integer.parseInt(rows[6]);
				
				if (rb1.isSelected()) {
					rows[1] = "Apple";
					store_balance += 1 * Integer.parseInt(rows[2]);
					System.out.println(store_balance);
					customer_balance -= 1 * Integer.parseInt(rows[2]);
					if (customer_balance < 0) { alert.showMessageDialog(null, "You don't have enough money!"); return; }
					else total_purchase = 1 * Integer.parseInt(rows[2]);
				}
				else if (rb2.isSelected()) {
					rows[1] = "Mango";
					store_balance += 2 * Integer.parseInt(rows[2]);
					customer_balance -= 2 * Integer.parseInt(rows[2]);
					if (customer_balance < 0) { alert.showMessageDialog(null, "You don't have enough money!"); return; }
					else total_purchase = 2 * Integer.parseInt(rows[2]);
				}
				else if (rb3.isSelected()) {
					rows[1] = "Banana";
					store_balance += 3 * Integer.parseInt(rows[2]);
					customer_balance -= 3 * Integer.parseInt(rows[2]);
					if (customer_balance < 0) { alert.showMessageDialog(null, "You don't have enough money!"); return; }
					else total_purchase = 3 * Integer.parseInt(rows[2]);
				}
				else {
					rows[1] = "Orange";
					store_balance += 4 * Integer.parseInt(rows[2]);
					customer_balance -= 4 * Integer.parseInt(rows[2]);
					if (customer_balance < 0) { alert.showMessageDialog(null, "You don't have enough money!"); return; }
					else total_purchase = 4 * Integer.parseInt(rows[2]);
					total_purchase = 4 * Integer.parseInt(rows[2]);
					
				}
				rows[5] = Integer.toString(store_balance);
				rows[4] = Integer.toString(customer_balance);
				rows[3] = Integer.toString(total_purchase);
				model.addRow(rows);
				
				tfName.setText("");
				tfQua.setText("");
				total_purchase = 0;
				rb3.setSelected(true);
				
				String name = rows[0];
				int qua = Integer.parseInt(rows[2]);
				String fruit = rows[1];
				
				members.add(new MemberV0(name, fruit, qua, store_balance, customer_balance, total_purchase));
			}
		});
		btnDel.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				int rowIndex = table.getSelectedRow();
				if (rowIndex == -1) return;
				model.removeRow(rowIndex);
				members.remove(rowIndex);
			}
		});
		add(bottomPanel, BorderLayout.SOUTH);
		setVisible(true);
	}
	
	class MemberV0 {
		private String name;
		private String fruit;
		private int qua;
		private int total;
		private int customer;
		private int store;
		
		public MemberV0(String name, String fruit, int qua, int total, int customer, int store) {
			this.name = name;
			this.fruit = fruit;
			this.qua = qua;
			this.total = total;
			this.customer = customer;
			this.store = store;
		}
	}
	
	public static void main(String[] args) {
		new Main();
	}
}
